# Common feature defines for the FLTK build

FEATUREDEFS = ENABLE_CANVAS_PATH ENABLE_CHANNEL_MESSAGING ENABLE_CONTEXT_MENUS \
		ENABLE_CSS_BOX_DECORATION_BREAK ENABLE_CSS_TRANSFORMS_ANIMATIONS_UNPREFIXED \
		ENABLE_DETAILS_ELEMENT ENABLE_FTPDIR ENABLE_HIDDEN_PAGE_DOM_TIMER_THROTTLING \
		ENABLE_ICONDATABASE ENABLE_IMAGE_DECODER_DOWN_SAMPLING \
		ENABLE_JIT ENABLE_LEGACY_VENDOR_PREFIXES ENABLE_LINK_PREFETCH \
		ENABLE_LLINT ENABLE_METER_ELEMENT ENABLE_NAVIGATOR_HWCONCURRENCY \
		ENABLE_PROMISES ENABLE_PROGRESS_ELEMENT ENABLE_SVG_FONTS \
		ENABLE_TEMPLATE_ELEMENT ENABLE_WEB_SOCKETS ENABLE_XSLT \
		ENABLE_VIEW_MODE_CSS_MEDIA ENABLE_CURSOR_SUPPORT \
		ENABLE_DRAG_SUPPORT ENABLE_FIFTH_VIDEO ENABLE_VIDEO ENABLE_VIDEO_TRACK \
		ENABLE_MATHML ENABLE_TEXT_CARET ENABLE_TEXT_SELECTION \
		ENABLE_WILL_REVEAL_EDGE_EVENTS USE_TEXTURE_MAPPER \
		ENABLE_REQUEST_AUTOCOMPLETE ENABLE_REQUEST_ANIMATION_FRAME \
		USE_CROSS_PLATFORM_CONTEXT_MENUS

CXXFLAGS += $(foreach a, $(FEATUREDEFS), -D$(a))
CXXFLAGS += -DENABLE_NETSCAPE_PLUGIN_API=0 \
		-DENABLE_DATE_AND_TIME_INPUT_TYPES=0

CXXFLAGS += -ffunction-sections -fdata-sections
CXXFLAGS += -fno-rtti -fno-exceptions
CXXFLAGS += -Wall

FLTKCONFIG := $(shell which fltk-config13 || which fltk-config)

FLTKVER := $(shell $(FLTKCONFIG) --version)
FLTKMINOR := $(shell echo $(FLTKVER) | cut -d. -f2)
FLTKPATCH := $(shell echo $(FLTKVER) | cut -d. -f3)

FLTKENOUGH := $(shell test "$(FLTKMINOR)" -lt 3 || test "$(FLTKPATCH)" -lt 3 || echo ok)

ifneq ($(FLTKENOUGH), ok)
  $(error FLTK >= 1.3.3 not found, got $(FLTKVER))
endif

PERL ?= $(shell which perl)
PYTHON ?= $(shell which python2 || which python)
RUBY ?= $(shell which ruby)

ifeq ($(PERL),)
  $(error Perl not found, set the PERL var if it's not in path)
endif
ifeq ($(PYTHON),)
  $(error Python not found, set the PYTHON var if it's not in path)
endif
ifeq ($(RUBY),)
  $(error Ruby not found, set the RUBY var if it's not in path)
endif
ifeq ($(shell which gperf),)
  $(error gperf not found)
endif
ifeq ($(shell which bison),)
  $(error bison not found)
endif

PYTHONVER := $(shell $(PYTHON) --version 2>&1 | cut -d. -f1 | cut -d' ' -f2-)
ifneq ($(PYTHONVER), 2)
  $(error Python 2 is required, 3 won't work.)
endif
